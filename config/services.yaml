# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'pl'
    import_directory: '%kernel.project_dir%/var/import'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    admin.invitation:
        class: App\Admin\InvitationAdmin
        arguments: [~, App\Entity\Invitation, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: invitations, label: label.invitations, label_catalogue: "admin" }
        public: true
        calls:
            - [ setTranslationDomain, [ "admin" ] ]

    admin.person:
        class: App\Admin\PersonAdmin
        arguments: [~, App\Entity\Person, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: invitations, label: label.person, label_catalogue: "admin" }
        public: true
        calls:
            - [ setTranslationDomain, [ "admin" ] ]

    admin.parameter:
        class: App\Admin\ParameterAdmin
        arguments: [~, App\Entity\Parameter, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: invitations, label: label.parameters, label_catalogue: "admin" }
        public: true
        calls:
            - [ setTranslationDomain, [ "admin" ] ]

    admin.invitationGroup:
        class: App\Admin\InvitationGroupAdmin
        arguments: [~, App\Entity\InvitationGroup, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: invitations, label: label.invitation_group, label_catalogue: "admin" }
        public: true
        calls:
            - [ setTranslationDomain, [ "admin" ] ]

    admin.personGroup:
        class: App\Admin\PersonGroupAdmin
        arguments: [~, App\Entity\PersonGroup, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: invitations, label: label.person_group , label_catalogue: "admin" }
        public: true
        calls:
            - [ setTranslationDomain, [ "admin" ] ]

    admin.page:
        class: App\Admin\PageAdmin
        arguments: [~, App\Entity\Page, 'PixSortableBehaviorBundle:SortableAdmin']
        tags:
            - { name: sonata.admin, manager_type: orm, group: content, label: label.page, label_catalogue: "admin"  }
        calls:
            - [ addChild, ['@admin.pageBlock', 'page']]
            - [ setTranslationDomain, [ "admin" ] ]
        public: true

    admin.pageBlock:
        class: App\Admin\PageBlockAdmin
        arguments: [~, App\Entity\PageBlock, 'PixSortableBehaviorBundle:SortableAdmin', '@block.service']
        tags:
            - { name: sonata.admin, manager_type: orm, group: content, label: label.page_block, label_catalogue: "admin" }
        public: true
        calls:
            - [ setTranslationDomain, [ "admin" ] ]

    admin.news:
        class: App\Admin\NewsAdmin
        arguments: [~, App\Entity\News, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: content, label: label.news , label_catalogue: "admin"}
        public: true
        calls:
            - [ setTranslationDomain, [ "admin" ] ]

    admin.gifts:
        class: App\Admin\GiftAdmin
        arguments: [~, App\Entity\Gift, 'PixSortableBehaviorBundle:SortableAdmin']
        tags:
            - { name: sonata.admin, manager_type: orm, group: gift_list, label: label.gifts, label_catalogue: "admin" }
        public: true
        calls:
            - [ setTranslationDomain, [ "admin" ] ]

    admin.setup:
        class: App\Admin\SetupAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: setup, label: label.setup, label_catalogue: "admin" }
        arguments:
            - null
            - null
            - App\Controller\Admin\ConfigController
        public: true
        calls:
            - [ setTranslationDomain, [ "admin" ] ]

    admin.importExport:
        class: App\Admin\ImportExportAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: invitations, label: label.import_export, label_catalogue: "admin" }
        arguments:
            - null
            - null
            - App\Controller\Admin\ImportExportController
        public: true
        calls:
            - [ setTranslationDomain, [ "admin" ] ]

    admin.importExportGifts:
        class: App\Admin\ImportExportGiftsAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: gift_list, label: label.import_export, label_catalogue: "admin" }
        arguments:
            - null
            - null
            - App\Controller\Admin\ImportExportGiftsController
        public: true
        calls:
            - [ setTranslationDomain, [ "admin" ] ]

    # Manager of block
    block.service:
        class: App\BlockManager\Services\BlockService
        arguments: ['@service_container']

    invitation.auhenticator:
        class: App\Security\InvitationProvider
        arguments: [ "@doctrine.orm.entity_manager" ]

    app.config:
        public: true
        class: App\Services\ConfigService
        arguments: [ "@doctrine.orm.entity_manager" ]

    # External bundles 
    gedmo.listener.sortable:
        class: Gedmo\Sortable\SortableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    app.menu_builder:
        class: App\Menu\Builder 
        arguments: ["@knp_menu.factory", "@doctrine.orm.entity_manager", "@router", "@app.config"] 
 
    app.private_menu: 
        class: Knp\Menu\MenuItem 
        factory: ["@app.menu_builder", PrivateMenu] 
        arguments: ["@request_stack"] 
        tags: 
            - { name: knp_menu.menu, alias: private_menu }
 
    app.public_menu: 
        class: Knp\Menu\MenuItem 
        factory: ["@app.menu_builder", PublicMenu] 
        arguments: ["@request_stack"] 
        tags: 
            - { name: knp_menu.menu, alias: public_menu }
    

    app.recorder:
        class: InvitationBundle\Services\Recorder
        arguments: [ "@doctrine.orm.entity_manager", "@security.token_storage", "@request_stack" ]
        public: true


    # Data guards:
    App\EventListener\PageDataGuard:
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    App\Form\Type\ImageFormMediaType:
        arguments: ['@twig', '@event_dispatcher']
        tags:
            - { name: form.type, alias: acmefile }
